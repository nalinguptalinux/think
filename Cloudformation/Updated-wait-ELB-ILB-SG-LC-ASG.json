{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Create Tag based : ELB, ECS-Cluster, Container, Service, Task defination, IAM Permission using Autoscaling with optmized AMI using existing Networking Resource",
	"Parameters": {
		"SubnetID": {
			"Description": "Subnets to launch 2 Public",
			"Type": "CommaDelimitedList",
			"Default": "subnet-b732b3de,subnet-f6822b9f"
		},
		"DesiredCapacity": {
			"Type": "Number",
			"Default": "1",
			"Description": "Number of instances to launch in your ECS cluster."
		},
		"MaxSize": {
			"Type": "Number",
			"Default": "1",
			"Description": "Maximum number of instances that can be launched in your ECS cluster."
		},
		"InstanceType": {
			"Description": "EC2 instance type.",
			"Type": "String",
			"Default": "t2.medium",
			"AllowedValues": ["t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m4.large", "m4.2xlarge"]
		}
	},


	"Mappings": {
		"AWSRegionArch2AMI": {
			"ap-southeast-1": {
				"HVM64": "ami-a88530cb"
			},
			"ap-northeast-1": {
				"HVM64": "ami-c393d6a4"
			},
			"ap-southeast-2": {
				"HVM64": "ami-8af8ffe9"
			}
		}

	},

	"Resources": {

		"ECSCluster": {
			"Type": "AWS::ECS::Cluster"
		},

		"taskdefinition": {
			"Type": "AWS::ECS::TaskDefinition",
			"Properties": {
				"ContainerDefinitions": [{
					"Name": "ECS-HP-TASK",
					"Cpu": "10",
					"Essential": "true",
					"Memory": "800",
					"PortMappings": [{
						"HostPort": "3000",
						"Protocol": "tcp",
						"ContainerPort": "3000"
					}],
					"Environment": [{
						"Name": "NODE_ENV",
						"Value": "staging"
					}],
					"Image": "nalinguptalinux/ecs-hp-sfhk:latest"
				}]
			}
		},

		"ECSAutoScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"VPCZoneIdentifier": {
					"Ref": "SubnetID"
				},
				"LaunchConfigurationName": {
					"Ref": "ContainerInstances"
				},
				"MinSize": "1",
				"MaxSize": {
					"Ref": "MaxSize"
				},
				"DesiredCapacity": {
					"Ref": "DesiredCapacity"
				}
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT10M"
				}
			},
			"UpdatePolicy": {
				"AutoScalingRollingUpdate": {
					"MinInstancesInService": "1",
					"MaxBatchSize": "1",
					"PauseTime": "PT15M",
					"WaitOnResourceSignals": "true"
				}
			}
		},



		"ContainerInstances": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"commands": {
							"01_add_instance_to_cluster": {
								"command": {
									"Fn::Join": ["", ["#!/bin/bash\n", "echo ECS_CLUSTER=", {
										"Ref": "ECSCluster"
									}, " >> /etc/ecs/ecs.config"]]
								}
							}
						},
						"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["", [
										"[main]\n",
										"stack=", {
											"Ref": "AWS::StackId"
										}, "\n",
										"region=", {
											"Ref": "AWS::Region"
										}, "\n"
									]]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},

							"/etc/ecs/ecs.config": {
								"content": {
									"Fn::Join": [
										"", [
											"ECS_CLUSTER=", {
												"Ref": "ECSCluster"
											}
										]
									]
								},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},

							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": ["", [
										"[cfn-auto-reloader-hook]\n",
										"triggers=post.update\n",
										"path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
										"action=/opt/aws/bin/cfn-init -v ",
										"         --stack ", {
											"Ref": "AWS::StackName"
										},
										"         --resource ContainerInstances ",
										"         --region ", {
											"Ref": "AWS::Region"
										}, "\n",
										"runas=root\n"
									]]
								}
							}
						},
						"services": {
							"sysvinit": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"KeyName": "group.my",
				"ImageId": {
					"Fn::FindInMap": ["AWSRegionArch2AMI", {
						"Ref": "AWS::Region"
					}, "HVM64"]
				},
				"InstanceType": "t2.medium",
				"InstanceMonitoring": true,
				"AssociatePublicIpAddress": "true",
				"IamInstanceProfile": {
					"Ref": "EC2InstanceProfile"
				},
				"SecurityGroups": [{
					"Ref": "ECSSecurityGroup"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash -ex", "\n",
							"yum update -y", "\n",
							"yum install -y aws-cfn-bootstrap", "\n",
							"echo ECS_CLUSTER=", {
								"Ref": "ECSCluster"
							}, " >> /etc/ecs/ecs.config", "\n",
							"# Signal success\n",
							"/opt/aws/bin/cfn-signal -e $? ",
							"         --stack ", {
								"Ref": "AWS::StackName"
							},
							"         --resource ECSAutoScalingGroup ",
							"         --region ", {
								"Ref": "AWS::Region"
							}, "\n"
						]]
					}
				}
			}
		},

		"EcsElasticLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"Subnets": {
					"Ref": "SubnetID"
				},
				"Listeners": [{
					"LoadBalancerPort": "80",
					"InstancePort": "3000",
					"Protocol": "TCP"
				}],
				"Scheme": "internet-facing",
				"Tags": [{
					"Key": "CF-Environment",
					"Value": "test-environment"
				}],
				"SecurityGroups": [{
					"Ref": "ILBSecurityGroup"
				}],
				"HealthCheck": {
					"Target": "TCP:3000",
					"HealthyThreshold": "2",
					"UnhealthyThreshold": "10",
					"Interval": "30",
					"Timeout": "5"
				}
			}
		},
		"ILBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "ilb-securitygroup-stack",
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupIngress": [{
					"CidrIp": "0.0.0.0/0",
					"FromPort": 3000,
					"IpProtocol": "tcp",
					"ToPort": 3000
				}, {
					"CidrIp": "0.0.0.0/0",
					"FromPort": 80,
					"IpProtocol": "tcp",
					"ToPort": 80
				}],
				"VpcId": "vpc-ff822b96"
			}
		},

		"service": {
			"Type": "AWS::ECS::Service",
			"DependsOn": ["ECSAutoScalingGroup"],
			"Properties": {
				"Cluster": {
					"Ref": "ECSCluster"
				},
				"DesiredCount": "1",
				"LoadBalancers": [{
					"ContainerName": "ECS-HP-TASK",
					"ContainerPort": "3000",
					"LoadBalancerName": {
						"Ref": "EcsElasticLoadBalancer"
					}
				}],
				"Role": {
					"Ref": "ECSServiceRole"
				},
				"TaskDefinition": {
					"Ref": "taskdefinition"
				}
			}
		},

		"ECSServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ecs.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "ecs-service",
					"PolicyDocument": {
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"elasticloadbalancing:Describe*",
								"elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
								"elasticloadbalancing:RegisterInstancesWithLoadBalancer",
								"ec2:Describe*",
								"elasticloadbalancing:DeregisterTargets",
								"elasticloadbalancing:RegisterTargets",
								"ec2:AuthorizeSecurityGroupIngress"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},

		"EC2Role": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "ecs-service",
					"PolicyDocument": {
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"ecs:CreateCluster",
								"ecs:DeregisterContainerInstance",
								"ecs:DiscoverPollEndpoint",
								"ecs:Poll",
								"ecs:RegisterContainerInstance",
								"ecs:StartTelemetrySession",
								"ecs:Submit*",
								"logs:CreateLogStream",
								"logs:PutLogEvents"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},

		"EC2InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "EC2Role"
				}]
			}
		},

		"ECSSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Fortigate recommended settings.  See marketplace for docs.",
				"VpcId": "vpc-ff822b96",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3000",
					"ToPort": "3000",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "4000",
					"ToPort": "4000",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},




		"SRPtaskdefinition": {
			"Type": "AWS::ECS::TaskDefinition",
			"Properties": {
				"ContainerDefinitions": [{
					"Name": "ECS-SRP-TASK",
					"Cpu": "10",
					"Essential": "true",
					"Memory": "800",
					"PortMappings": [{
						"HostPort": "4000",
						"Protocol": "tcp",
						"ContainerPort": "4000"
					}],
					"Environment": [{
						"Name": "NODE_ENV",
						"Value": "staging"
					}],
					"Image": "nalinguptalinux/ecs-spr-pdp-sfhk:latest"
				}]
			}
		},
		"EcshpElasticLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"Subnets": {
					"Ref": "SubnetID"
				},
				"Listeners": [{
					"LoadBalancerPort": "80",
					"InstancePort": "4000",
					"Protocol": "TCP"
				}],
				"Scheme": "internet-facing",
				"Tags": [{
					"Key": "CF-Environment",
					"Value": "test-environment"
				}],
				"SecurityGroups": [{
					"Ref": "ILBhpSecurityGroup"
				}],
				"HealthCheck": {
					"Target": "TCP:4000",
					"HealthyThreshold": "2",
					"UnhealthyThreshold": "10",
					"Interval": "30",
					"Timeout": "5"
				}
			}
		},
		"ILBhpSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "ilb-securitygroup-stack",
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupIngress": [{
					"CidrIp": "0.0.0.0/0",
					"FromPort": 4000,
					"IpProtocol": "tcp",
					"ToPort": 4000
				}, {
					"CidrIp": "0.0.0.0/0",
					"FromPort": 80,
					"IpProtocol": "tcp",
					"ToPort": 80
				}],
				"VpcId": "vpc-ff822b96"
			}
		},
		"Hpservice": {
			"Type": "AWS::ECS::Service",
			"DependsOn": ["ECSAutoScalingGroup"],
			"Properties": {
				"Cluster": {
					"Ref": "ECSCluster"
				},
				"DesiredCount": "1",
				"LoadBalancers": [{
					"ContainerName": "ECS-SRP-TASK",
					"ContainerPort": "4000",
					"LoadBalancerName": {
						"Ref": "EcshpElasticLoadBalancer"
					}
				}],
				"Role": {
					"Ref": "ECSServiceRole"
				},
				"TaskDefinition": {
					"Ref": "SRPtaskdefinition"
				}
			}
		}




	},


	"Outputs": {
		"ecsservice": {
			"Value": {
				"Ref": "service"
			}
		},
		"Hpservice": {
			"Value": {
				"Ref": "service"
			}
		},
		"ElasticLoadBalancer": {
			"Value": {
				"Fn::Join": ["", ["http://", {
					"Fn::GetAtt": ["EcsElasticLoadBalancer", "DNSName"]
				}]]
			},
			"Description": "Load Balancer URL EcsElasticLoadBalancer"
		},
		"EcshpElasticLoadBalancer": {
			"Value": {
				"Fn::Join": ["", ["http://", {
					"Fn::GetAtt": ["EcshpElasticLoadBalancer", "DNSName"]
				}]]
			},
			"Description": "Load Balancer URL EcsElasticLoadBalancer"
		},
		"ecscluster": {
			"Value": {
				"Ref": "ECSCluster"
			}
		},
		"taskdef": {
			"Value": {
				"Ref": "taskdefinition"
			}
		}
	}
}