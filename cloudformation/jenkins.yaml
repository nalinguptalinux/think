AWSTemplateFormatVersion: '2010-09-09'

Description: 'This template will install Jenkins server on EC2 Instance with
              Docker Engine'

Parameters:

  VPC:
    Description: Choose which VPC the Jenkins server should be installed to
    Type: AWS::EC2::VPC::Id

  SubnetId:
    Description: Choose which subnets this Jenkins server should be deployed to
    Type: String

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: Jenkins Server EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
    - t1.micro
    - t2.micro
    - t2.small
    - t2.medium
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  DnsZoneName:
    Description: Route53-hosted zone to use for the DNS record (<prefix>.<zone>)
    Type: String

  DnsPrefix:
    Description: Prefix for Jenkins' DNS record (<prefix>.<zone>)
    Type: String

Mappings:

  RegionMap:
        ap-southeast-1:
            AMI: ami-dc9339bf
        ap-northeast-1:
            AMI: ami-56d4ad31
        ap-southeast-2:
            AMI: ami-1c47407f

Resources:

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SubnetId: !Ref 'SubnetId'
      SecurityGroupIds:
      - !Ref 'InstanceSecurityGroup'
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 25
            VolumeType: gp2
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance
          # Install Jenkins
          wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
          rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
          yum install -y jenkins
          /etc/init.d/jenkins start
          chkconfig jenkins on
          # Install Docker
          yum install -y docker
          /etc/init.d/docker start
          usermod -a -G docker jenkins

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
      - subnet-36c6b440
      - subnet-9d9bd5f9
      Scheme: internet-facing
      CrossZone: true
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '8080'
        Protocol: HTTP
      Instances:
      - !Ref 'EC2Instance'

  DNSRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref DnsZoneName
      Comment: Domain records for my test server.
      RecordSets:
      - Name: !Ref DnsPrefix
        Type: A
        TTL: '300'
        ResourceRecords:
        - !GetAtt [EC2Instance, PublicIp]

Outputs:

  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'

  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]

  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]

  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
