---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
    Install the frontend stack for all environments

Parameters:
  BusinessUnit:
    Type: String
    Description: Two letters country code for billing purpose
    AllowedValues:
    - HK
    - MY
    - ID
    - SG

  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of Desired Size AS instance

  ECRRegistry:
    Description: Main ECR Registry
    Type: String

  HpECRRepo:
    Description: Homepage ECR Repo
    Type: String

  HostedZoneName:
    Description: Hosted Zone for Route53 record
    Type: String

  Instancestype:
    Description: EC2 instance type.
    Type: String
    AllowedValues:
    - t2.medium
    - m3.medium
    - m3.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge

  KeyNamessh:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  MinSizeAS:
    Type: Number
    Default: '2'
    Description: Number of Min Size AS instance

  MaxSize:
    Type: Number
    Default: '4'
    Description: Maximum number of instances that can be launched in your ECS cluster.

  NewRelicLicenseKey:
    Description: New Relic License Key
    Type: String

  NewRelicRPM:
    Description: New Relic RPM
    Type: String

  NginxECRRepo:
    Description: NGIN ECR Repo
    Type: String

  PagerDutyArn:
    Description: Pager Duty ARN
    Type: String

  HPagerDutyArn:
    Description: Pager Duty ARN
    Type: String

  SrpPdpECRRepo:
    Description: SRP PDP ECR Repo
    Type: String

  RecordName:
    Description: The name of the DNS record to create.
    Type: String

  ResourceBucketName:
    Description: Name of the S3 bucket to retrieve the downloaded scripts or installation files
    Type: String

  SSLCertificateARN:
    Description: The SSL certificate ARN as specified in Route 53
    Type: String

  SubnetID:
    Description: Public subnets
    Type: CommaDelimitedList
    Default: 'subnet-49c6b43f,subnet-9c9bd5f8'

  SumoLogicInstallerFileName:
    Description: The installation file for Sumo Logic Collector
    Type: String

  SumoLogicAccessId:
    Description: Sumo Logic access id
    Type: String

  SumoLogicAccessKey:
    Description: Sumo Logic access key
    Type: String

  VPC:
    Description: Choose which VPC we should be deploying the stack to
    Type: AWS::EC2::VPC::Id

  VpcCidr:
    Description: Enter VPC Cidr
    Type: String

  VpcDns:
    Description: Enter VPC DNS must be end with X.X.0.2
    Type: String

  WebserviceCount:
    Description: Enter Webservice Container Count - Must be equal to no. of instance in AutoScaling
    Type: String

  HpserviceCount:
    Description: Enter Hpservice Container Count - Must be equal to no. of instance in AutoScaling
    Type: String

  SrpserviceCount:
    Description: Enter Srpservice Container Count - Must be equal to no. of instance in AutoScaling
    Type: String

  Env:
    Description: Environment name
    Type: String

  Version:
    Description: Version string to display in header
    Type: String

  InstProfile:
    Description: Instance Profile Detail
    Type: String

  Project:
    Description: Instance Profile Detail
    Type: String

Mappings:
  AWSRegionArch2AMI:
    ap-southeast-1:
      HVM64: ami-19f7787a
    ap-northeast-1:
      HVM64: ami-c393d6a4
    ap-southeast-2:
      HVM64: ami-f63f6f91

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
######
  ECSScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentStep: 1
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 25
  ECSScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentStep: 1
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -25
  CPUReservationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 70%'
      AlarmName: !Join ['', ['ECS-CPU>70%', '-', !Ref 'ECSCluster']]
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions:
      - !Ref ECSScaleUpPolicy
  CPUReservationLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes less than 20%'
      AlarmName: !Join ['', ['ECS-CPU<20%', '-', !Ref 'ECSCluster']]
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      AlarmActions:
      - !Ref ECSScaleDownPolicy
######

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: SubnetID
      LaunchConfigurationName:
        Ref: ContainerInstances
      AvailabilityZones: [!Select [0, !GetAZs ''], !Select [1, !GetAZs '']]
      Cooldown: '40'
      HealthCheckGracePeriod: '60'
      HealthCheckType: EC2
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupMinSize
        - GroupMaxSize
        - GroupDesiredCapacity
        - GroupInServiceInstances
        - GroupPendingInstances
        - GroupTotalInstances
        - GroupTerminatingInstances
        - GroupStandbyInstances
      MinSize:
        Ref: MinSizeAS
      MaxSize:
        Ref: MaxSize
      DesiredCapacity:
        Ref: DesiredCapacity
      Tags:
      - Value:
          Ref: AWS::StackName
        Key: CF-Name
        PropagateAtLaunch: true
      - Value:
          Ref: AWS::StackName
        Key: Name
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun: [Configure]
        Configure:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ContainerInstances --configsets full_install --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/opt/ipp/sumologic/sources.json":
              content: !Sub |
                {
                  "api.version": "v1",
                  "sources": [
                    {
                      "sourceType": "LocalFile",
                      "name": "frontend-Docker-local-${Env}",
                      "pathExpression": "/var/lib/docker/containers/*/*.log",
                      "category": "frontend-Docker/Ecs/Container/logs",
                      "hostName": "${Env}-${AWS::StackName}",
                      "useAutolineMatching": false,
                      "multilineProcessingEnabled": false,
                      "timeZone": "UTC",
                      "filters": [{
                        "filterType":"Exclude",
                        "name":"Route 53 Health Check",
                        "regexp":".*Amazon Route 53 Health Check Service.*"
                        }],
                      "automaticDateParsing": true,
                      "forceTimeZone": false,
                      "defaultDateFormat": "MMM dd HH:mm:ss"
                    }
                  ]
                }
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: ["/etc/cfn/cfn-hup.conf" , "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
    Properties:
      KeyName:
        Ref: KeyNamessh
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - HVM64
      InstanceType:
        Ref: Instancestype
      InstanceMonitoring: true
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref 'InstProfile'
      SecurityGroups:
      - Ref: ECSSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -ex
          /bin/echo -e '######--------------------------Install software----------------------###### \n'
          /usr/bin/yum update -y
          /usr/bin/yum install -y sysstat nmap telnet curl wget vim elinks bind-utils jq
          /usr/bin/yum install -y aws-cfn-bootstrap awslogs
          /usr/bin/easy_install awscli
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --configsets InstallAndRun --resource ContainerInstances
          /bin/echo -e '######-----------------Configure Hostname on EC2 Host-----------------###### \n'
          function configure_hosts {
            recordName=${RecordName}
            project=${Project}
            instance_ip=$(/usr/bin/curl -q http://169.254.169.254/latest/meta-data/local-ipv4)
            domain=$(/bin/awk '/^search/ { print $2 }' /etc/resolv.conf)
            ipend=`/bin/echo $instance_ip | /bin/sed 's/\./\-/g'`
            /bin/echo "$instance_ip $recordName.$domain $recordName-$project-$ipend">> /etc/hosts
            /bin/hostname $recordName-$project-$ipend
          }
          configure_hosts
          /bin/echo -e '######------------Install Sumo Logic Collector on EC2 Host------------###### \n'
          /usr/bin/aws s3 cp s3://${ResourceBucketName}/sumologic/${SumoLogicInstallerFileName} /tmp/${SumoLogicInstallerFileName} --region ${AWS::Region}
          /bin/chmod +x /tmp/${SumoLogicInstallerFileName}
          /tmp/${SumoLogicInstallerFileName}  -q -VskipRegistration=true -Vephemeral=true -Vsources=/opt/ipp/sumologic/sources.json -Vsumo.accessid=${SumoLogicAccessId} -Vsumo.accesskey=${SumoLogicAccessKey}
          /bin/rm -f /tmp/${SumoLogicInstallerFileName}
          /opt/SumoCollector/collector start
          /bin/echo -e ' ######--------------Install NewRelic agent on EC2 Host----------------###### \n'
          /usr/bin/aws s3 cp s3://${ResourceBucketName}/newrelic/${NewRelicRPM} /tmp/${NewRelicRPM} --region ${AWS::Region}
          /bin/rpm -vhi /tmp/${NewRelicRPM}
          /usr/sbin/usermod  -a -G docker newrelic
          /usr/sbin/nrsysmond-config --set license_key=${NewRelicLicenseKey}
          /bin/echo hostname=$(/bin/hostname ) >> /etc/newrelic/nrsysmond.cfg
          /etc/init.d/newrelic-sysmond start
          /bin/echo -e ' ######---------------------Final config steps-------------------------###### \n'
          /bin/echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          /bin/echo -e ' #############    ------------   Testing of New relic / Sumologic agent info ---------  ########## \n'
          /bin/ps aux | grep newrelic
          /bin/rm -f /tmp/${NewRelicRPM}
          /bin/echo -e '######-------------------------- Service autostart-------------------####### \n'
          /sbin/chkconfig newrelic-sysmond on
          /bin/echo -e '######--------------------------Signal success------------------------###### \n '
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}


  HPtaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: ECS-HP-TASK
        Cpu: '256'
        Memory: '1024'
        Essential: true
        PortMappings:
        - HostPort: '3000'
          Protocol: tcp
          ContainerPort: '3000'
        Environment:
        - Name: NODE_ENV
          Value: production
        - Name: NEW_RELIC_LICENSE_KEY
          Value: !Sub '${NewRelicLicenseKey}'
        - Name: NEW_RELIC_APP_NAME
          Value: !Join ['', [!Ref 'Env', '-' ,'HP']]
        Image: !Join ['', [!Ref 'ECRRegistry', '/', !Ref 'HpECRRepo']]

  EcsHpELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: 'ECSAutoScalingGroup'
    Properties:
      Subnets:
        Ref: SubnetID
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '3000'
        Protocol: TCP
      Scheme: internal
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      CrossZone: true
      Tags:
      - Value:
          Ref: AWS::StackName
        Key: CF-Name
      SecurityGroups:
      - Ref: ILBSecurityGroup
      HealthCheck:
        Target: TCP:3000
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '5'

  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: ECS-Web-TASK
        Cpu: '512'
        Memory: '512'
        Essential: true
        PortMappings:
        - HostPort: '80'
          Protocol: tcp
          ContainerPort: '80'
        Command:
        - !GetAtt EcsHpELB.DNSName
        - !GetAtt ECSSrpPdpELB.DNSName
        - Ref: 'VpcDns'
        - Ref: 'Version'
        - Ref: 'NewRelicLicenseKey'
        - Ref: 'Env'
        Image: !Join ['', [!Ref 'ECRRegistry', '/', !Ref 'NginxECRRepo']]

  ILBWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ILBWebSecurityGroup
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: !Ref 'VpcCidr'
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId: !Ref 'VPC'
      Tags:
      - Value: 'ILBWebSecurityGroup'
        Key: Name

  Webservice:
    Type: AWS::ECS::Service
    DependsOn: 'ECSAutoScalingGroup'
    Properties:
      Cluster:  !Ref 'ECSCluster'
      DesiredCount: !Ref 'WebserviceCount'
      TaskDefinition: !Ref 'WebTaskDefinition'
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '50'

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: 'AutoscalingRole'
    Properties:
      MaxCapacity: !Ref 'MaxSize'
      MinCapacity: !Ref 'MinSizeAS'
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster: !Ref 'ECSCluster'
        Service: !GetAtt 'Webservice.Name'
      RoleARN: !GetAtt 'AutoscalingRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs

  ServiceScalingUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: 'ServiceScalingTarget'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25

  ServiceScalingDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: 'ServiceScalingTarget'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -25

  ECSWebHigh:
    Type: AWS::CloudWatch::Alarm
    DependsOn: 'Webservice'
    Properties:
      AlarmDescription: 'Scale-up if CPUUtilization  40% for 1 minutes ECSWebHigh '
      AlarmName: !Join ['', ['ECSWebHigh-CPU-40%', '-', !Ref 'Env', '-', !Ref 'Version']]
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/ECS'
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '40'
      AlarmActions:
      - Ref: ServiceScalingUpPolicy
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Webservice.Name'
      ComparisonOperator: GreaterThanThreshold

  ECSWebMemLow:
    Type: AWS::CloudWatch::Alarm
    DependsOn: 'Webservice'
    Properties:
      AlarmDescription: 'Scale-Down if MemoryUtilization  5% for 5 minutes ECSWebMemLow '
      AlarmName: !Join ['', ['ECSWebMemLow-Memory-5%', '-', !Ref 'Env', '-', !Ref 'Version' ]]
      MetricName: 'MemoryUtilization'
      Namespace: 'AWS/ECS'
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '5'
      AlarmActions:
      - Ref: ServiceScalingDownPolicy
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Webservice.Name'
      ComparisonOperator: LessThanThreshold

  AutoscalingRole:
    DependsOn: 'ECSAutoScalingGroup'
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
      - 'arn:aws:iam::aws:policy/AutoScalingFullAccess'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'

  ECSServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs.amazonaws.com'
          Action: 'sts:AssumeRole'



  SrpServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: 'AutoscalingRole'
    Properties:
      MaxCapacity: !Ref 'MaxSize'
      MinCapacity: !Ref 'MinSizeAS'
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster: !Ref 'ECSCluster'
        Service: !GetAtt 'SRPService.Name'
      RoleARN: !GetAtt 'AutoscalingRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs

  SrpServiceScalingUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'SrpServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25

  SrpServiceScalingDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'SrpServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -25

  ECSSprHigh:
    Type: AWS::CloudWatch::Alarm
    DependsOn: 'SRPService'
    Properties:
      AlarmDescription: 'Scale-up if MemoryUtilization  65% for 1 minutes ECSSprHigh '
      AlarmName: !Join ['', ['ECSSprHigh-Mem-75%', '-', !Ref 'Env', '-', !Ref 'Version']]
      MetricName: 'MemoryUtilization'
      Namespace: 'AWS/ECS'
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '65'
      AlarmActions:
      - Ref: 'SrpServiceScalingUpPolicy'
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'SRPService.Name'
      ComparisonOperator: GreaterThanThreshold

  ECSSrpMemLow:
    Type: AWS::CloudWatch::Alarm
    DependsOn: 'SRPService'
    Properties:
      AlarmDescription: 'Scale-Down if MemoryUtilization  25% for 5 minutes ECSSrpMemLow'
      AlarmName: !Join ['', ['ECSSrpMem-Memory-25', '-', !Ref 'Env', '-', !Ref 'Version']]
      MetricName: 'MemoryUtilization'
      Namespace: 'AWS/ECS'
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '25'
      AlarmActions:
      - Ref: 'SrpServiceScalingDownPolicy'
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'SRPService.Name'
      ComparisonOperator: LessThanThreshold

  HpServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: 'AutoscalingRole'
    Properties:
      MaxCapacity: !Ref 'MaxSize'
      MinCapacity: !Ref 'MinSizeAS'
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster: !Ref 'ECSCluster'
        Service: !GetAtt 'HPService.Name'
      RoleARN: !GetAtt 'AutoscalingRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs

  HpServiceScalingUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'HpServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25

  HpServiceScalingDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'HpServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -25

  ECSHpHigh:
    Type: AWS::CloudWatch::Alarm
    DependsOn: 'HPService'
    Properties:
      AlarmDescription: 'Scale-up if MemoryUtilization  65% for 1 minutes ECSHpHigh '
      AlarmName: !Join ['', ['ECSHpHigh-Mem-65%', '-', !Ref 'Env', '-', !Ref 'Version']]
      MetricName: 'MemoryUtilization'
      Namespace: 'AWS/ECS'
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '65'
      AlarmActions:
      - Ref: 'HpServiceScalingUpPolicy'
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'HPService.Name'
      ComparisonOperator: GreaterThanThreshold

  ECSHPMemLow:
    Type: AWS::CloudWatch::Alarm
    DependsOn: 'HPService'
    Properties:
      AlarmDescription: 'Scale-Down if MemoryUtilization  25% for 5 minutes ECSHPMemLow '
      AlarmName: !Join ['', ['ECSHPMemLow-Mem-5%', '-', !Ref 'Env', '-', !Ref 'Version']]
      MetricName: 'MemoryUtilization'
      Namespace: 'AWS/ECS'
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '25'
      AlarmActions:
      - Ref: 'HpServiceScalingDownPolicy'
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'HPService.Name'
      ComparisonOperator: LessThanThreshold

  ILBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ilb-securitygroup-stack
      SecurityGroupIngress:
      - CidrIp: !Ref 'VpcCidr'
        FromPort: 3000
        IpProtocol: tcp
        ToPort: 3000
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId: !Ref 'VPC'
      Tags:
      - Value: 'ILBSecurityGroup'
        Key: Name

  HPService:
    Type: AWS::ECS::Service
    DependsOn: 'ECSAutoScalingGroup'
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: !Ref HpserviceCount
      DeploymentConfiguration:
        MaximumPercent: '150'
        MinimumHealthyPercent: '50'
      LoadBalancers:
      - ContainerName: ECS-HP-TASK
        ContainerPort: '3000'
        LoadBalancerName:
          Ref: EcsHpELB
      Role: !Ref 'ECSServiceRole'
      TaskDefinition:
        Ref: HPtaskdefinition

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECSSecurityGroup.
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'VpcCidr'
      - IpProtocol: tcp
        FromPort: '3000'
        ToPort: '3000'
        CidrIp: !Ref 'VpcCidr'
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '4000'
        ToPort: '4000'
        CidrIp: !Ref 'VpcCidr'
      - IpProtocol: icmp
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: !Ref 'VpcCidr'
      Tags:
      - Value: 'ECSSecurityGroup'
        Key: Name

  SRPTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
      - Name: ECS-SRP-TASK
        Cpu: '256'
        Memory: '1024'
        Essential: true
        PortMappings:
        - HostPort: '4000'
          Protocol: tcp
          ContainerPort: '4000'
        Environment:
        - Name: NODE_ENV
          Value: production
        - Name: NEW_RELIC_LICENSE_KEY
          Value: !Sub '${NewRelicLicenseKey}'
        - Name: NEW_RELIC_APP_NAME
          Value: !Join ['', [!Ref 'Env', '-' ,'SRP-PDP']]
        Image: !Join ['', [!Ref 'ECRRegistry', '/', !Ref 'SrpPdpECRRepo']]

  ECSSrpPdpELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    DependsOn: 'ECSAutoScalingGroup'
    Properties:
      Subnets:
        Ref: SubnetID
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '4000'
        Protocol: TCP
      Scheme: internal
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      CrossZone: true
      Tags:
      - Value:
          Ref: AWS::StackName
        Key: CF-Name
      SecurityGroups:
      - Ref: ILBhpSecurityGroup
      HealthCheck:
        Target: TCP:4000
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '5'

  ILBhpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ilb-securitygroup-stack
      SecurityGroupIngress:
      - CidrIp: !Ref 'VpcCidr'
        FromPort: 4000
        IpProtocol: tcp
        ToPort: 4000
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId: !Ref 'VPC'
      Tags:
      - Value: 'ILBhpSecurityGroup'
        Key: Name

  SRPService:
    Type: AWS::ECS::Service
    DependsOn:
    - ECSAutoScalingGroup
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: !Ref SrpserviceCount
      DeploymentConfiguration:
        MaximumPercent: '150'
        MinimumHealthyPercent: '50'
      LoadBalancers:
      - ContainerName: ECS-SRP-TASK
        ContainerPort: '4000'
        LoadBalancerName:
          Ref: ECSSrpPdpELB
      Role:
        Ref: ECSServiceRole
      TaskDefinition:
        Ref: SRPTaskDefinition

Outputs:
  HpElasticLoadBalancer:
    Value: !GetAtt EcsHpELB.DNSName
    Description: HP ELB

  SrpPdpElasticLoadBalancer:
    Value: !GetAtt ECSSrpPdpELB.DNSName
    Description: SRP ELB

  EcsClusterName:
    Value: !Ref 'ECSCluster'

  RecordName:
    Value: !Ref 'RecordName'
