---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
    This template will install the development stack

Parameters:
  BusinessUnit:
    Type: String
    Description: Two letters country code for billing purpose
    AllowedValues:
    - HK
    - MY
    - ID
    - SG

  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of Desired Size AS instance

  ECRRegistry:
    Description: Main ECR Registry
    Type: String

  HpECRRepo:
    Description: Homepage ECR Repo
    Type: String

  HostedZoneName:
    Description: Hosted Zone for Route53 record
    Type: String

  Instancestype:
    Description: EC2 instance type.
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge

  KeyNamessh:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  MinSizeAS:
    Type: Number
    Default: '2'
    Description: Number of Min Size AS instance

  MaxSize:
    Type: Number
    Default: '4'
    Description: Maximum number of instances that can be launched in your ECS cluster.

  NewRelicLicenseKey:
    Description: New Relic License Key
    Type: String

  NewRelicRPM:
    Description: New Relic RPM
    Type: String

  NginxECRRepo:
    Description: NGIN ECR Repo
    Type: String

  PagerDutyArn:
    Description: Pager Duty ARN
    Type: String

  HPagerDutyArn:
    Description: Pager Duty ARN
    Type: String

  SrpPdpECRRepo:
    Description: SRP PDP ECR Repo
    Type: String

  RecordName:
    Description: The name of the DNS record to create.
    Type: String

  ResourceBucketName:
    Description: Name of the S3 bucket to retrieve the downloaded scripts or installation files
    Type: String

  SSLCertificateARN:
    Description: The SSL certificate ARN as specified in Route 53
    Type: String

  SubnetID:
    Description: Public subnets
    Type: CommaDelimitedList
    Default: subnet-49c6b43f,subnet-9c9bd5f8

  SumoLogicInstallerFileName:
    Description: The installation file for Sumo Logic Collector
    Type: String

  SumoLogicAccessId:
    Description: Sumo Logic access id
    Type: String

  SumoLogicAccessKey:
    Description: Sumo Logic access key
    Type: String

  VPC:
    Description: Choose which VPC we should be deploying the stack to
    Type: AWS::EC2::VPC::Id

  VpcCidr:
    Description: Enter VPC Cidr
    Type: String

  VpcDns:
    Description: 'Enter VPC DNS must be end with X.X.0.2'
    Type: String

  WebserviceCount:
    Description: 'Enter Webservice Conatiner Count : Must be equal to no. of instance in Autoscaling '
    Type: String

  HpserviceCount:
    Description: 'Enter Hpservice Conatiner Count : Must be equal to no. of instance in Autoscaling '
    Type: String

  SrpserviceCount:
    Description: 'Enter Srpservice Conatiner Count : Must be equal to no. of instance in Autoscaling '
    Type: String

Mappings:

  AWSRegionArch2AMI:
    ap-southeast-1:
      HVM64: ami-b4ae1dd7
    ap-northeast-1:
      HVM64: ami-c393d6a4
    ap-southeast-2:
      HVM64: ami-f63f6f91

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster

  HPtaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: ECS-HP-TASK
        Cpu: '256'
        Essential: 'true'
        Memory: '1024'
        PortMappings:
        - HostPort: '3000'
          Protocol: tcp
          ContainerPort: '3000'
        Environment:
        - Name: NODE_ENV
          Value: production
        Image: !Join ['', [!Ref 'ECRRegistry', '/', !Ref 'HpECRRepo']]

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: SubnetID
      LaunchConfigurationName:
        Ref: ContainerInstances
      AvailabilityZones: [!Select [0, !GetAZs ''], !Select [1, !GetAZs '']]
      Cooldown: '40'
      HealthCheckGracePeriod: '60'
      HealthCheckType: EC2
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupMinSize
        - GroupMaxSize
        - GroupDesiredCapacity
        - GroupInServiceInstances
        - GroupPendingInstances
        - GroupTotalInstances
        - GroupTerminatingInstances
        - GroupStandbyInstances
      MinSize:
        Ref: MinSizeAS
      MaxSize:
        Ref: MaxSize
      DesiredCapacity:
        Ref: DesiredCapacity
      Tags:
      - Value:
          Ref: AWS::StackName
        Key: CF-Name
        PropagateAtLaunch: true
      - Value:
          Ref: AWS::StackName
        Key: Name
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'

  ECSScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: ECSAutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  ECSScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: ECSAutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"

  ECSHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '80'
      AlarmActions:
      - Ref: ECSScaleUpPolicy
      - Ref: HPagerDutyArn
      InsufficientDataActions:
      - Ref: HPagerDutyArn
      OKActions:
      - Ref: HPagerDutyArn
      Dimensions:
      - Name: ClusterName
        Value:
          Ref: 'ECSCluster'
      ComparisonOperator: GreaterThanThreshold

  ECSLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 40% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '10'
      AlarmActions:
      - Ref: ECSScaleDownPolicy
      - Ref: PagerDutyArn
      InsufficientDataActions:
      - Ref: PagerDutyArn
      OKActions:
      - Ref: PagerDutyArn
      Dimensions:
      - Name: ClusterName
        Value:
          Ref: 'ECSCluster'
      ComparisonOperator: LessThanThreshold

  ECSMemHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if Mem > 80% for 10 minutes
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '80'
      AlarmActions:
      - Ref: ECSScaleUpPolicy
      - Ref: HPagerDutyArn
      InsufficientDataActions:
      - Ref: HPagerDutyArn
      OKActions:
      - Ref: HPagerDutyArn
      Dimensions:
      - Name: ClusterName
        Value:
          Ref: 'ECSCluster'
      ComparisonOperator: GreaterThanThreshold

  ECSMemLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 40% for 10 minutes
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '10'
      AlarmActions:
      - Ref: ECSScaleDownPolicy
      - Ref: PagerDutyArn
      InsufficientDataActions:
      - Ref: PagerDutyArn
      OKActions:
      - Ref: PagerDutyArn
      Dimensions:
      - Name: ClusterName
        Value:
          Ref: 'ECSCluster'
      ComparisonOperator: LessThanThreshold

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Configure

        Configure:
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - region=
                  - Ref: AWS::Region
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - 'triggers=post.update'
                  - 'path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init'
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - "         --stack "
                  - Ref: AWS::StackName
                  - "         --resource ContainerInstances "
                  - "         --region "
                  - Ref: AWS::Region
                  - 'runas=root'
            "/opt/ipp/sumologic/sources.json":
              content: !Sub |
                {
                  "api.version": "v1",
                  "sources": [
                    {
                      "sourceType": "LocalFile",
                      "name": "docker-host-local",
                      "pathExpression": "/var/lib/docker/containers/*/*.log",
                      "category": "docker/local/json",
                      "hostName": "dockerHost",
                      "useAutolineMatching": false,
                      "multilineProcessingEnabled": false,
                      "timeZone": "UTC",
                      "automaticDateParsing": true,
                      "forceTimeZone": false,
                      "defaultDateFormat": "MMM dd HH:mm:ss"
                    }
                  ]
                }
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      KeyName:
        Ref: KeyNamessh
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - HVM64
      InstanceType:
        Ref: Instancestype
      InstanceMonitoring: true
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      SecurityGroups:
      - Ref: ECSSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -ex
          ######--------------------------Install software----------------------######
          /usr/bin/yum update -y
          /usr/bin/yum install -y sysstat nmap telnet curl wget vim elinks bind-utils
          /usr/bin/yum install -y aws-cfn-bootstrap
          /usr/bin/easy_install awscli

          ######-----------------------------Bootstrap--------------------------######
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --configsets InstallAndRun --resource ContainerInstances


          ######------------Install Sumo Logic Collector on EC2 Host------------######
          /usr/local/bin/aws s3 cp s3://${ResourceBucketName}/sumologic/${SumoLogicInstallerFileName} /tmp/${SumoLogicInstallerFileName} --region ${AWS::Region}
          /bin/chmod +x /tmp/${SumoLogicInstallerFileName}
          /tmp/${SumoLogicInstallerFileName}  -q -VskipRegistration=true -Vephemeral=true -Vsources=/opt/ipp/sumologic/sources.json -Vsumo.accessid=${SumoLogicAccessId} -Vsumo.accesskey=${SumoLogicAccessKey}
          /bin/rm -f /tmp/${SumoLogicInstallerFileName}

          ######-----------------Configure Hostname on EC2 Host-----------------######

          function configure_hosts {
            recordName=${RecordName}
            instance_ip=$(/usr/bin/curl -q http://169.254.169.254/latest/meta-data/local-ipv4)
            domain=$(/bin/awk '/^search/ { print $2 }' /etc/resolv.conf)
            ipend=`/bin/echo $instance_ip | /bin/sed 's/\./\-/g'`
            /bin/echo "$instance_ip $recordName.$domain $recordName-$ipend">> /etc/hosts
            /bin/hostname $recordName-$ipend
          }
          configure_hosts

          ######--------------Install NewRelic agent on EC2 Host----------------######
          /usr/local/bin/aws s3 cp s3://${ResourceBucketName}/newrelic/${NewRelicRPM} /tmp/${NewRelicRPM} --region ${AWS::Region}
          /bin/rpm -Uvhi /tmp/${NewRelicRPM}
          /usr/sbin/nrsysmond-config --set license_key=${NewRelicLicenseKey}
          /bin/echo hostname=$(/bin/hostname ) >> /etc/newrelic/nrsysmond.cfg
          /etc/init.d/newrelic-sysmond start
          /sbin/chkconfig newrelic-sysmond on


          #############    ------------   Testing of New relic agent info ---------  ##########

          /bin/ps aux | grep newrelic
          /bin/rm -f /tmp/${NewRelicRPM}


          ######---------------------Final config steps-------------------------######

          /bin/echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config


          ######--------------------------Signal success------------------------######
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  EcsHpELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        Ref: SubnetID
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '3000'
        Protocol: TCP
      Scheme: internal
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      CrossZone: true
      Tags:
      - Value:
          Ref: AWS::StackName
        Key: CF-Name
      SecurityGroups:
      - Ref: ILBSecurityGroup
      HealthCheck:
        Target: TCP:3000
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '5'

  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: ECS-Web-TASK
        Cpu: '512'
        Essential: 'true'
        Memory: '512'
        PortMappings:
        - HostPort: '80'
          Protocol: tcp
          ContainerPort: '80'
        Command:
        - !GetAtt EcsHpELB.DNSName
        - !GetAtt ECSSrpPdpELB.DNSName
        - Ref: VpcDns
        Image: !Join ['', [!Ref 'ECRRegistry', '/', !Ref 'NginxECRRepo']]

  ECSWebELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        Ref: SubnetID
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      - LoadBalancerPort: '443'
        InstancePort: '80'
        Protocol: HTTPS
        SSLCertificateId: !Ref 'SSLCertificateARN'
      HealthCheck:
        Target: TCP:80
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '5'
      Scheme: internet-facing
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      Tags:
      - Value:
          Ref: AWS::StackName
        Key: CF-Name
      SecurityGroups:
      - Ref: ILBWebSecurityGroup

  ILBWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ILBWebSecurityGroup
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: !Ref 'VpcCidr'
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId: !Ref 'VPC'

  Webservice:
    Type: AWS::ECS::Service
    DependsOn:
    - ECSAutoScalingGroup
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: !Ref WebserviceCount
      DeploymentConfiguration:
        MaximumPercent: '150'
        MinimumHealthyPercent: '50'
      LoadBalancers:
      - ContainerName: ECS-Web-TASK
        ContainerPort: '80'
        LoadBalancerName:
          Ref: ECSWebELB
      Role:
        Ref: ECSServiceRole
      TaskDefinition:
        Ref: WebTaskDefinition

  ILBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ilb-securitygroup-stack
      SecurityGroupIngress:
      - CidrIp: !Ref 'VpcCidr'
        FromPort: 3000
        IpProtocol: tcp
        ToPort: 3000
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId: !Ref 'VPC'

  HPService:
    Type: AWS::ECS::Service
    DependsOn:
    - ECSAutoScalingGroup
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: !Ref HpserviceCount
      DeploymentConfiguration:
        MaximumPercent: '150'
        MinimumHealthyPercent: '50'
      LoadBalancers:
      - ContainerName: ECS-HP-TASK
        ContainerPort: '3000'
        LoadBalancerName:
          Ref: EcsHpELB
      Role:
        Ref: ECSServiceRole
      TaskDefinition:
        Ref: HPtaskdefinition

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - ec2:Describe*
            - ecr:Get*
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability
            - ecr:PutImage
            - ecr:InitiateLayerUpload
            - ecr:UploadLayerPart
            - ecr:CompleteLayerUpload
            - ecr:ListImages
            - ecr:Describe*
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:RegisterTargets
            - ec2:AuthorizeSecurityGroupIngress
            Resource: "*"

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ec2:Describe*
            - ecr:Get*
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability
            - ecr:PutImage
            - ecr:InitiateLayerUpload
            - ecr:UploadLayerPart
            - ecr:CompleteLayerUpload
            - ecr:ListImages
            - ecr:Describe*
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:Get*
            - s3:List*
            Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: EC2Role

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECSSecurityGroup.
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'VpcCidr'
      - IpProtocol: tcp
        FromPort: '3000'
        ToPort: '3000'
        CidrIp: !Ref 'VpcCidr'
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '4000'
        ToPort: '4000'
        CidrIp: !Ref 'VpcCidr'
      - IpProtocol: icmp
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: !Ref 'VpcCidr'

  SRPTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: ECS-SRP-TASK
        Cpu: '256'
        Essential: 'true'
        Memory: '1024'
        PortMappings:
        - HostPort: '4000'
          Protocol: tcp
          ContainerPort: '4000'
        Environment:
        - Name: NODE_ENV
          Value: production
        Image: !Join ['', [!Ref 'ECRRegistry', '/', !Ref 'SrpPdpECRRepo']]

  ECSSrpPdpELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        Ref: SubnetID
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '4000'
        Protocol: TCP
      Scheme: internal
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      CrossZone: true
      Tags:
      - Value:
          Ref: AWS::StackName
        Key: CF-Name
      SecurityGroups:
      - Ref: ILBhpSecurityGroup
      HealthCheck:
        Target: TCP:4000
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '5'

  ILBhpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ilb-securitygroup-stack
      SecurityGroupIngress:
      - CidrIp: !Ref 'VpcCidr'
        FromPort: 4000
        IpProtocol: tcp
        ToPort: 4000
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId: !Ref 'VPC'

  SRPService:
    Type: AWS::ECS::Service
    DependsOn:
    - ECSAutoScalingGroup
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: !Ref SrpserviceCount
      DeploymentConfiguration:
        MaximumPercent: '150'
        MinimumHealthyPercent: '50'
      LoadBalancers:
      - ContainerName: ECS-SRP-TASK
        ContainerPort: '4000'
        LoadBalancerName:
          Ref: ECSSrpPdpELB
      Role:
        Ref: ECSServiceRole
      TaskDefinition:
        Ref: SRPTaskDefinition

  FrontendRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:  !Join ['', [!Ref 'HostedZoneName', '.']]
      Comment: DNS for frontend
      Name: !Join ['', [!Ref 'RecordName', ., !Ref 'HostedZoneName', .]]
      Type: CNAME
      TTL: 60
      ResourceRecords:
      - !GetAtt [ECSWebELB, DNSName]

Outputs:

  WebElasticLoadBalancer:
    Value: !GetAtt ECSWebELB.DNSName
    Description: Web ELB

  HpElasticLoadBalancer:
    Value: !GetAtt EcsHpELB.DNSName
    Description: HP ELB

  SrpPdpElasticLoadBalancer:
    Value: !GetAtt ECSSrpPdpELB.DNSName
    Description: SRP ELB

  EcsClusterName:
    Value: !Ref 'ECSCluster'

  RecordName:
    Value: !Ref 'RecordName'
