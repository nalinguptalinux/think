Description: >
  This template will install Jenkins server on EC2 Instance with Docker Engine and Ansible.

Parameters:

  BusinessUnit:
    Type: String
    Description: Two letters country code for billing purpose
    AllowedValues:
    - HK
    - MY
    - ID
    - SG

  VPC:
    Description: Choose which VPC the Jenkins server should be installed to
    Type: AWS::EC2::VPC::Id

  VpcCidr:
    Description: The VPC CIDR that can access this instance via SSH
    Type: String

  SubnetId:
    Description: Choose which subnets this Jenkins server should be deployed to
    Type: String

  Subnets:
    Description: The subnets which the ELB is hosted.
    Type: CommaDelimitedList

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: Jenkins Server EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.medium
    - m3.medium
    - m3.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  DnsZoneName:
    Description: Route53-hosted zone to use for the DNS record (<prefix>.<zone>)
    Type: String

  DnsPrefix:
    Description: Prefix for Jenkins' DNS record (<prefix>.<zone>}
    Type: String

  NewRelicLicenseKey:
    Description: New Relic License Key
    Type: String

  NewRelicRPM:
    Description: New Relic RPM
    Type: String

  ResourceBucketName:
    Description: Name of the S3 bucket to retrieve the downloaded scripts or installation files
    Type: String

  CertificateARN:
    Description: arn of SSL certificate
    Type: String

Mappings:

  RegionMap:
        ap-southeast-1:
            AMI: ami-77af2014
        ap-northeast-1:
            AMI: ami-3bd3c45c
        ap-southeast-2:
            AMI: ami-10918173

Resources:

  JenkinsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: jenkins
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - autoscaling:*
            - application-autoscaling:*
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:Describe*
            - cloudformation:ListStack*
            - cloudformation:UpdateStack
            - cloudformation:SetStackPolicy
            - cloudwatch:*
            - ec2:*
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:CreateSecurityGroup
            - ec2:Describe*
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:CompleteLayerUpload
            - ecr:DescribeImages
            - ecr:DescribeRepositories
            - ecr:GetAuthorizationToken
            - ecr:GetDownloadUrlForLayer
            - ecr:GetRepositoryPolicy
            - ecr:InitiateLayerUpload
            - ecr:ListImages
            - ecr:PutImage
            - ecr:UploadLayerPart
            - ecs:*
            - elasticloadbalancing:*
            - iam:AddRoleToInstanceProfile
            - iam:CreateInstanceProfile
            - iam:CreateRole
            - iam:DeleteInstanceProfile
            - iam:DeleteRole
            - iam:DeleteRolePolicy
            - iam:ListInstanceProfiles
            - iam:ListRoles
            - iam:PassRole
            - iam:PutRolePolicy
            - iam:AttachRolePolicy
            - iam:DetachRolePolicy
            - iam:RemoveRoleFromInstanceProfile
            - iam:Get*
            - route53:ChangeResourceRecordSets
            - route53:ListHostedZonesByName
            - route53:ListHostedZones
            - route53:GetChange
            - s3:*
            - sts:AssumeRole
            Resource: "*"

  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Install
          - Configure

        Install:
          packages:
            yum:
              docker: []
              git: []
              nginx: []
          files:
            '/etc/nginx/nginx.conf':
              content: !Sub |
                    user nginx;
                    worker_processes auto;
                    error_log /var/log/nginx/error.log;
                    pid /var/run/nginx.pid;

                    include /usr/share/nginx/modules/*.conf;

                    events {
                        worker_connections 1024;
                    }

                    http {
                        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

                        access_log  /var/log/nginx/access.log  main;

                        sendfile            on;
                        tcp_nopush          on;
                        tcp_nodelay         on;
                        keepalive_timeout   65;
                        types_hash_max_size 2048;

                        include             /etc/nginx/mime.types;
                        default_type        application/octet-stream;

                        include /etc/nginx/conf.d/*.conf;

                        index   index.html index.htm;

                        server {
                          listen       80;
                          server_name  _;

                          location / {
                                proxy_pass http://127.0.0.1:8080;
                          }
                        }
                      }
              mode: '000755'
              owner: root
              group: root
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
              nginx:
                enabled: true
                ensureRunning: true
                files:
                - /etc/nginx/nginx.conf

        Configure:
          commands:
            01_add_jenkins_user_to_docker_group:
              command: 'usermod -a -G docker jenkins'

    Properties:
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
      - Key: String
        Value: Jenkins
      - Key: Name
        Value: jenkins-server
      - Key: "business unit"
        Value: !Ref BusinessUnit
      SubnetId: !Ref 'SubnetId'
      SecurityGroupIds:
      - !Ref 'InstanceSecurityGroup'
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 25
            VolumeType: gp2
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum -y update
          # Install Jenkins
          wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
          echo "enabled=1" >> /etc/yum.repos.d/jenkins.repo
          rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
          yum install -y jenkins java-1.8.0-openjdk
          yum remove -y java-1.7.0-openjdk
          gpasswd -a jenkins docker
          /etc/init.d/jenkins start || /etc/init.d/jenkins restart
          chkconfig jenkins on
          # Install Ansible
          pip install ansible
          # Install docker-compose
          pip install docker-compose
          # Install cloud init
          yum install -y aws-cfn-bootstrap
          /usr/bin/aws s3 cp s3://${ResourceBucketName}/newrelic/${NewRelicRPM} /tmp/${NewRelicRPM} --region ${AWS::Region}
          /bin/rpm -vhi /tmp/${NewRelicRPM}
          /usr/sbin/usermod  -a -G docker newrelic
          /usr/sbin/nrsysmond-config --set license_key=${NewRelicLicenseKey}
          /bin/echo hostname=$(/bin/hostname ) >> /etc/newrelic/nrsysmond.cfg
          /etc/init.d/newrelic-sysmond start
          /sbin/chkconfig newrelic-sysmond on
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --configsets InstallAndRun --resource EC2Instance
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance
          # Setup git settings
          mkdir /var/lib/jenkins/.ssh
          echo "Host git.realestate.com.au\n  Port 65422 \n  User git" > /var/lib/jenkins/.ssh/config
          chown -R jenkins:jenkins /var/lib/jenkins/.ssh


  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: JenkinsInstanceRole

  JenkinsELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: 'internet-facing'
      Subnets: !Ref 'Subnets'
      SecurityGroups:
      - !Ref 'InstanceSecurityGroup'
      LoadBalancerName: 'jenkins-elb'
      CrossZone: true
      ConnectionSettings:
        IdleTimeout: '180'
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60
      Instances:
      - !Ref 'EC2Instance'
      Listeners:
      - InstancePort: '443'
        LoadBalancerPort: '443'
        Protocol: 'HTTPS'
        SSLCertificateId: !Ref 'CertificateARN'
      - InstancePort: '80'
        LoadBalancerPort: '80'
        Protocol: 'HTTP'
      HealthCheck:
        Target: TCP:80
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '5'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'VpcCidr'
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: jenkins-server-security-group

  DNSRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref 'DnsZoneName'
      Comment: Domain records for Squarefoot Jenkins Server.
      RecordSets:
      - Name: !Ref 'DnsPrefix'
        Type: CNAME
        TTL: '300'
        ResourceRecords:
        - !GetAtt [JenkinsELB, DNSName]

Outputs:

  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'

  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]

  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]

  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
