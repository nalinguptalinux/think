- name: get target group arn
  vars:
    - name: "{{ application_name }}-beta"
  set_fact:
    target_group_arn: "{{ target_group_arns[name] }}"

- name: Describe target group
  command: aws elbv2 describe-target-health --target-group-arn {{ target_group_arn }} --region {{ aws_region }}
  register: target_group_health

- name: Read instance health result from ELB
  set_fact:
    target_group_json: "{{ target_group_health.stdout | from_json }}"

- name: Describe the instance in target group
  command: aws ec2 describe-instances --instance-ids {{ target_group_json.TargetHealthDescriptions[0].Target.Id }} --region {{aws_region}}
  register: instance_result

- name: Read instance describe result from ELB
  set_fact:
    instance_result_json: "{{ instance_result.stdout | from_json }}"

- name: Get current stack name from the instance describe output
  set_fact:
    current_stack_name: "{{ instance_result_json.Reservations[0].Instances[0].Tags | selectattr('Key', 'equalto', 'CF-Name') | map(attribute = 'Value') | join('')}}"

- name: Get all stacks 
  command: aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --region {{aws_region}}
  register: all_stack_output

- name: Parse the all stack result to json
  set_fact:
    all_stacks_json: "{{all_stack_output.stdout | from_json }}"

- name: Filter the target stacks
  vars:
    pattern: "{{ application_name }}"
  set_fact:
    target_stacks: "{{all_stacks_json.StackSummaries | selectattr('StackName', 'match', pattern) | map(attribute='StackName') | list }}"

- name: Delete the filtered stacks
  command: aws cloudformation delete-stack --stack-name {{item}} --region {{aws_region}}
  with_items:
    - "{{target_stacks}}"
  when: target_stacks | length > 0 and item != current_stack_name