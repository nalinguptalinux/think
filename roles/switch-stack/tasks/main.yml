---
- name: get target group arn
  vars:
    - name: "{{ application_name }}-{{ switch_type }}"
  set_fact:
    target_group_arn: "{{ target_group_arns[name] }}"
    new_stack_name: "{{ application_name }}-{{ build }}"

- name: Describe target group
  command: aws elbv2 describe-target-health --target-group-arn {{ target_group_arn }} --region {{ aws_region }}
  register: target_group_health

- name: Read instance health result from ELB
  set_fact:
    target_group_json: "{{ target_group_health.stdout | from_json }}"

- name: Describe the instance in target group
  command: aws ec2 describe-instances --instance-ids {{ target_group_json.TargetHealthDescriptions[0].Target.Id }} --region {{aws_region}}
  register: instance_result

- name: Read instance describe result from ELB
  set_fact:
    instance_result_json: "{{ instance_result.stdout | from_json }}"

- name: Get old stack name from the instance describe output
  set_fact:
    old_stack_name: "{{ instance_result_json.Reservations[0].Instances[0].Tags | selectattr('Key', 'equalto', 'CF-Name') | map(attribute = 'Value') | join('')}}"

- name: Get describe result from old stack
  command: aws cloudformation describe-stack-resources --stack-name {{ old_stack_name }} --region {{aws_region}}
  register: old_stack_result

- name: Parse old stack result to json format
  set_fact:
    old_stack_output: "{{old_stack_result.stdout | from_json}}"

- name: Get the old ASG name
  set_fact:
    old_asg_name: "{{ item.PhysicalResourceId }}"
  when: item.ResourceType == "AWS::AutoScaling::AutoScalingGroup"
  with_items:
    - "{{ old_stack_output.StackResources }}"


- name: Get described result from new stack
  command: aws cloudformation describe-stack-resources --stack-name {{ new_stack_name }} --region {{aws_region}}
  register: new_stack_result

- name: Parse new stack result to json format
  set_fact:
    stack_output: "{{new_stack_result.stdout | from_json}}"

- name: Get the new ASG name
  set_fact:
    new_asg_name: "{{ item.PhysicalResourceId }}"
  when: item.ResourceType == "AWS::AutoScaling::AutoScalingGroup"
  with_items:
    - "{{ stack_output.StackResources }}"

- name: Attach fixed target group to new AutoScalingGroup
  command: aws autoscaling attach-load-balancer-target-groups --auto-scaling-group-name {{ new_asg_name }} --target-group-arns {{ target_group_arn }} --region {{ aws_region }}

- pause: minutes=1

- name: Describe health of target group
  command: aws elbv2 describe-target-health --target-group-arn {{ target_group_arn }} --region {{ aws_region }}
  register: new_target_group_health

- name: Read target group health to json
  set_fact: 
    new_target_group_json: "{{ new_target_group_health.stdout | from_json }}"

- name: Check the targets health
  fail: msg="Not all targets are healthy"
  when: item.TargetHealth.State != "healthy"
  with_items:
    - "{{ new_target_group_json.TargetHealthDescriptions }}"
  register: target_group_check_result
  ignore_errors: true

- name: roll_back if healthy check failed
  command: aws autoscaling detach-load-balancer-target-groups --auto-scaling-group-name {{ new_asg_name }} --target-group-arns {{ target_group_arn }} --region {{ aws_region }}
  when: target_group_check_result | failed

- name: Detach target group from old ASG
  command: aws autoscaling detach-load-balancer-target-groups --auto-scaling-group-name {{ old_asg_name }} --target-group-arns {{ target_group_arn }} --region {{ aws_region }}
  when: target_group_check_result | success

#waiting for the draining finished
- pause: minutes=5